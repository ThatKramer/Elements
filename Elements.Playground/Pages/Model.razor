@page "/"

@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Scripting.Hosting
@using System.Diagnostics
@using System.Reflection
@using System.IO
@using System.Threading
@using System.Web

@inject IJSRuntime JSRuntime
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject NavigationManager MyNavigationManager
@using System.Text.RegularExpressions;
<div class="grid">
    <button class="run" disabled=@loading @onclick="CompileAndRun">Run</button>
    <div id="inputs">
        @foreach (var input in globals.Inputs.Values)
        {
            if (input is Input<double> numberInput)
            {
                <div class="input">
                    <div class="inputName">@numberInput.Name</div>
                    <div>
                        <input type="range" min="1" max="100" @bind="numberInput.Value" @bind:event="oninput" class="slider"
                    id="length" @onchange="Run">
                    </div>
                </div>
            }
            else if (input is Input<Material> materialInput)
            {
                <div class="input">
                    <div class="inputName">@materialInput.Name</div>
                    <div>
                        <label for="gloss" style="display:block">Glossiness</label>
                        <input type="range" min="0.0" max="1.0" step="0.1" @bind="materialInput.Value.GlossinessFactor"
                    @bind:event="oninput" class="slider" id="gloss" @onchange="Run">
                    </div>
                    <div>
                        <label for="specular" style="display:block">Specular</label>
                        <input type="range" min="0.0" max="1.0" step="0.1" @bind="materialInput.Value.SpecularFactor"
                    @bind:event="oninput" class="slider" id="specular" @onchange="Run">
                    </div>
                    <div>
                        <label for="color" style="display:block">Color</label>
                        <input type="color" id="color" name="color" value="@materialInput.Value.Color.ToHex()"
                    @onchange="(ChangeEventArgs args) => {materialInput.Value.Color = new Color(args.Value.ToString()); Run();}">
                    </div>
                </div>
            }
            else if (input is Input<Vector3> vectorInput)
            {
                <div class="input">
                    <div class="inputName">@vectorInput.Name</div>
                    <div style="display:flex;flex-direction:row;justify-content:space-between">
                        <div>
                            <label for="x" style="display:block">X</label>
                            <input style="width:50px;" type="text" value="@vectorInput.Value.X"
                        @onchange="(ChangeEventArgs args) => {vectorInput.Value = new Vector3(double.Parse(args.Value.ToString()), vectorInput.Value.Y, vectorInput.Value.Z); Run();}">
                        </div>
                        <div>
                            <label for="y" style="display:block">Y</label>
                            <input style="width:50px;" type="text" value="@vectorInput.Value.Y"
                        @onchange="(ChangeEventArgs args) => {vectorInput.Value = new Vector3(vectorInput.Value.X, double.Parse(args.Value.ToString()), vectorInput.Value.Z); Run();}">
                        </div>
                        <div>
                            <label for="z" style="display:block">Z</label>
                            <input style="width:50px;" type="text" value="@vectorInput.Value.Z"
                        @onchange="(ChangeEventArgs args) => {vectorInput.Value = new Vector3(vectorInput.Value.X, vectorInput.Value.Y, double.Parse(args.Value.ToString())); Run();}">
                        </div>
                    </div>
                </div>
            }
            else if (input is WideFlangeProfileInput wideFlangeProfileInput)
            {
                <div class="input">
                    <div class="inputName">@wideFlangeProfileInput.Name</div>
                    <select style="display:block;" name="profile" id="profile"
                @onchange="(ChangeEventArgs args) => {wideFlangeProfileInput.Value = wideFlangeProfileInput.Factory.GetProfileByName(args.Value.ToString()); Run();}">
                        @foreach (var profile in wideFlangeProfileInput.Factory.AllProfiles())
                        {
                            <option value="@profile.Name">@profile.Name</option>
                        }
                    </select>
                </div>
            }
        }
    </div>
    <div id="editor">@csharp</div>
    <div id="model"></div>
    <div class="output">@((MarkupString)Regex.Replace(
        HttpUtility.HtmlEncode(@Output), "\r?\n|\r", "<br />"))</div>
</div>

@code {
    bool loading = true;
    private static Globals globals = new Globals();
    private static string csharp = @"var model = new Model();

var length = Inputs.GetNumberInput(""length"");
var m = Inputs.GetMaterialInput(""test material"");
var p = Inputs.GetProfileInput(""wide flange"");

for(var i=0; i<1; i++)
{
var start = new Vector3(i, 0, 0);
var end = new Vector3(i, length, i);

// The bottom chord
var bottomChord = new Line(start, end);
var bottomChordBeam = new Beam(bottomChord, p, null, m);
model.AddElement(bottomChordBeam);

var topChord = new Line(start + new Vector3(0,0,5), end + new Vector3(0,0,5));
var topChordBeam = new Beam(topChord, p, null, m);
model.AddElement(topChordBeam);

Vector3 last = default(Vector3);
for(var j=0.0; j<=1.0; j+=0.1)
{
var pt = bottomChord.PointAt(j);
var top = pt + new Vector3(0,0,5);
var panelLine = new Line(pt, top);
var panelBeam = new Beam(panelLine, p, null, m);
model.AddElement(panelBeam);

if(j > 0.0)
{
var braceLine = new Line(top, last);
var braceBeam = new Beam(braceLine, p, null, m);
model.AddElement(braceBeam);
}
last = pt;
}
}
return model;";
    private static string Output = "";
    private static IJSUnmarshalledRuntime Runtime;
    [Inject] private HttpClient Client { get; set; }
    private static Func<object[], Task> ExecutionDelegate;

    protected override async Task OnInitializedAsync()
    {
        Runtime = JSUnmarshalledRuntime;
        await Compiler.InitializeMetadataReferences(Client);
        await base.OnInitializedAsync();
        loading = false;

        globals.Inputs.Values.Add(new Input<double>("length", 5));
        var m = new Material("Test", new Color(1.0, 0.0, 0.0, 1.0));
        globals.Inputs.Values.Add(new Input<Material>("test material", m));
        globals.Inputs.Values.Add(new Input<Vector3>("a point", new Vector3(5.0, 2.0, 3.0)));
        await JSRuntime.InvokeVoidAsync("model.createTransformablePoint", "a point");
        globals.Inputs.Values.Add(new WideFlangeProfileInput("wide flange"));

        await CompileAndRun();

        await Task.FromResult(0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("model.initializeEditor");
            await JSRuntime.InvokeVoidAsync("model.initialize3D");
        }
    }

    [JSInvokable]
    public static void SetCodeValue(string code)
    {
        csharp = code;
    }

    [JSInvokable]
    public static async Task CompileAndRun()
    {
        Compile();
        await Run();
    }

    public static async Task Run()
    {
        RunInternal();
    }

    [JSInvokable]
    public static async Task RunInternal()
    {
        var sw = Stopwatch.StartNew();
        var currentOut = Console.Out;
        var writer = new StringWriter();
        Console.SetOut(writer);

        if (ExecutionDelegate == null)
        {
            Console.WriteLine("There is no execution method.");
            Output += writer.ToString();
            Console.SetOut(currentOut);
            sw.Stop();
            return;
        }

        var model = await (Task<object>)ExecutionDelegate(new object[] { globals, null });
        Console.WriteLine($"Run successful in {sw.ElapsedMilliseconds} ms");
        sw.Reset();

        await Task.Run(() =>
        {
            sw.Start();
            var glb = ((Elements.Model)model).ToGlTF();
            Runtime.InvokeUnmarshalled<byte[], bool>("model.loadModel", glb);
            Console.WriteLine($"GlTF loaded in {sw.ElapsedMilliseconds} ms");
        });

        Output += writer.ToString();
        Console.SetOut(currentOut);

        sw.Stop();
    }

    [JSInvokable]
    public static async Task UpdatePointInput(string name, double x, double y, double z)
    {
        var input = globals.Inputs.Values.FirstOrDefault(v=>v.Name == name && v is Input<Vector3>);
        if(input == null)
        {
            Console.WriteLine($"A vector input with the name {name} could not be found.");
        }
        var vectorInput = (Input<Vector3>)input;
        vectorInput.Value = new Vector3(x,-y,z);
        Run();
    }

    static void Compile()
    {
        Output = "";
        var sw = Stopwatch.StartNew();

        var currentOut = Console.Out;
        var writer = new StringWriter();
        Console.SetOut(writer);

        // Redirect debug to the console.
        Trace.Listeners.Clear();
        Trace.Listeners.Add(
        new TextWriterTraceListener(Console.Out));

        ExecutionDelegate = null;

        // Compilation warnings will be written to console.out
        // which is redirected here to the writer.
        var (success, asm, compilation) = Compiler.LoadSource(csharp);
        if (success)
        {
            var entryPoint = compilation.GetEntryPoint(CancellationToken.None);
            var type = asm.GetType($"{entryPoint.ContainingNamespace.MetadataName}.{entryPoint.ContainingType.MetadataName}");
            var entryPointMethod = type.GetMethod(entryPoint.MetadataName);

            ExecutionDelegate = (Func<object[], Task>)entryPointMethod.CreateDelegate(typeof(Func<object[], Task>));
            Console.WriteLine($"Compilation successful in {sw.ElapsedMilliseconds} ms");
        }
        else
        {
            Console.WriteLine("Compilation was not successful. The execution will not run.");
        }

        Output += writer.ToString();
        Console.SetOut(currentOut);

        sw.Stop();
    }
}